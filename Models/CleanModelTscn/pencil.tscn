[gd_scene load_steps=8 format=3 uid="uid://dyojqhtmdo7el"]

[ext_resource type="Texture2D" uid="uid://bltvlnenoc4am" path="res://Models/3D - Vox Cleaner Edited (No Character)/Pencil/pencil_25_Color.png" id="1_ydg7a"]
[ext_resource type="ArrayMesh" uid="uid://dd36c5dw5limx" path="res://Models/3D - Vox Cleaner Edited (No Character)/Pencil/pencil_25.obj" id="2_add57"]
[ext_resource type="Texture2D" uid="uid://cqiu0jl6fyohg" path="res://new_noise_texture_2d.tres" id="2_n3osk"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_uhfbx"]
albedo_color = Color(0.703808, 0.703808, 0.703807, 1)
albedo_texture = ExtResource("1_ydg7a")
texture_filter = 0

[sub_resource type="Shader" id="Shader_umafu"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx, vertex_lighting;

uniform vec4 albedo_ceiling : source_color;
uniform sampler2D texture_albedo_ceiling : source_color, filter_nearest, repeat_enable;

uniform vec4 albedo_wall : source_color;
uniform sampler2D texture_albedo_wall : source_color, filter_nearest, repeat_enable;

uniform vec4 albedo_floor : source_color;
uniform sampler2D texture_albedo_floor : source_color, filter_nearest, repeat_enable;

uniform float ground_threshold : hint_range(0.0, 1.0, 0.01) = 0.8;
uniform float blend_smoothness : hint_range(0.0, 1.0, 0.01) = 0.1; // Controle de suavidade da transição

// Transparency slider
uniform float transparency : hint_range(0.0, 1.0, 0.01) = 0.5; // Transparency control (0 = opaque, 1 = fully transparent)

varying vec3 uv1_triplanar_pos;
varying vec2 uv1;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

varying vec3 vertex_normal;

uniform bool uv_global = true;

void vertex() {
    vertex_normal = NORMAL;
    ROUGHNESS = 0.0;

    vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

    TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
    TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
    TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
    TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

    BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
    BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
    BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
    BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

    uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
    if (uv_global) {
        uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset;
    } else {
        uv1_triplanar_pos = vec4(VERTEX, 1.0).xyz * uv1_scale + uv1_offset;
    }

    uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
    uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);

    uv1 = UV;
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
    vec4 samp = vec4(0.0);
    samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
    samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
    samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;

    return samp;
}

const vec4 ZERO = vec4(0.0, 0.0, 0.0, 0.0);

uniform bool use_uv_on_wall = false;
uniform bool use_uv_on_floor = false;
uniform bool use_uv_on_ceiling = false;

void fragment() {
    vec4 albedo_tex_floor = vec4(0.0);
    if (use_uv_on_floor) {
        albedo_tex_floor = texture(texture_albedo_floor, UV * uv1_scale.xy + uv1_offset.xy);
    } else {
        albedo_tex_floor = triplanar_texture(texture_albedo_floor, uv1_power_normal, uv1_triplanar_pos);
    }

    vec4 albedo_tex_wall = vec4(0.0);
    if (use_uv_on_wall) {
        albedo_tex_wall = texture(texture_albedo_wall, UV * uv1_scale.xy + uv1_offset.xy);
    } else {
        albedo_tex_wall = triplanar_texture(texture_albedo_wall, uv1_power_normal, uv1_triplanar_pos);
    }

    vec4 albedo_tex_ceiling = vec4(0.0);
    if (use_uv_on_ceiling) {
        albedo_tex_ceiling = texture(texture_albedo_ceiling, UV * uv1_scale.xy + uv1_offset.xy);
    } else {
        albedo_tex_ceiling = triplanar_texture(texture_albedo_ceiling, uv1_power_normal, uv1_triplanar_pos);
    }

    float blend_factor_floor = smoothstep(ground_threshold - blend_smoothness, ground_threshold + blend_smoothness, vertex_normal.y);
    float blend_factor_ceiling = smoothstep(ground_threshold - blend_smoothness, ground_threshold + blend_smoothness, -vertex_normal.y);

    vec4 albedo_tex = mix(mix(albedo_tex_wall, albedo_tex_floor, blend_factor_floor), albedo_tex_ceiling, blend_factor_ceiling);
    vec4 albedo_color = mix(mix(albedo_wall, albedo_floor, blend_factor_floor), albedo_ceiling, blend_factor_ceiling);

    // Apply transparency slider by adjusting alpha
    albedo_color.a *= transparency;

    ALBEDO = albedo_color.rgb * albedo_tex.rgb;
    ALPHA = albedo_color.a; // Set the final alpha value

    METALLIC = 0.0;
    SPECULAR = 0.0;
    ROUGHNESS = 0.0;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1i87q"]
render_priority = 0
shader = SubResource("Shader_umafu")
shader_parameter/albedo_ceiling = Color(0.758192, 0.758192, 0.758191, 1)
shader_parameter/texture_albedo_ceiling = ExtResource("2_n3osk")
shader_parameter/albedo_wall = Color(0.737193, 0.737193, 0.737193, 1)
shader_parameter/texture_albedo_wall = ExtResource("2_n3osk")
shader_parameter/albedo_floor = Color(0.847474, 0.847474, 0.847474, 1)
shader_parameter/texture_albedo_floor = ExtResource("2_n3osk")
shader_parameter/ground_threshold = 0.8
shader_parameter/blend_smoothness = 0.1
shader_parameter/transparency = 0.19
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv_global = true
shader_parameter/use_uv_on_wall = false
shader_parameter/use_uv_on_floor = false
shader_parameter/use_uv_on_ceiling = false

[sub_resource type="ConvexPolygonShape3D" id="ConvexPolygonShape3D_m7055"]
points = PackedVector3Array(0.11745, 0.287302, 0.0173982, -0.2, 0.616446, -0.3, -0.192063, 0.631555, 0.2, 0.3, 1.84966, -0.292063, -0.192063, 1.84966, 0.2, 0.3, 1.84966, 0.2, -0.2, 1.87384, -0.3, 0.3, 0.631555, -0.292063, 0.3, 0.631555, 0.2, -0.00946165, 0.287302, -0.109514, -0.00946165, 0.287302, 0.0173982, 0.11745, 0.287302, -0.109514, -0.1, 0.43694, -0.2)

[node name="Pencil" type="MeshInstance3D"]
transform = Transform3D(4.55426e-16, -6.93436e-09, -0.0660644, -0.0833595, -6.93437e-09, -1.02594e-23, -3.64376e-09, 0.15864, -2.88777e-09, 0, 0, 0)
material_override = SubResource("StandardMaterial3D_uhfbx")
material_overlay = SubResource("ShaderMaterial_1i87q")
mesh = ExtResource("2_add57")

[node name="StaticBody3D" type="StaticBody3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D"]
shape = SubResource("ConvexPolygonShape3D_m7055")
