[gd_scene load_steps=12 format=3 uid="uid://bmwo1q3l2mnnm"]

[ext_resource type="Texture2D" uid="uid://bcy3oj87btger" path="res://Models/3D - Vox Cleaner Edited (No Character)/Puzzle objects/Control Box/control_box_OK_63_Color.png" id="1_d3s5t"]
[ext_resource type="Texture2D" uid="uid://cqiu0jl6fyohg" path="res://new_noise_texture_2d.tres" id="2_7gehf"]
[ext_resource type="ArrayMesh" uid="uid://cwuvk56lqq2vq" path="res://Models/3D - Vox Cleaner Edited (No Character)/Puzzle objects/Control Box/control_box_OK_63.obj" id="2_7xdwb"]
[ext_resource type="Texture2D" uid="uid://mhmqhlybxgoe" path="res://Models/3D - Vox Cleaner Edited (No Character)/Puzzle objects/Control Box/control_box_NG_C_62_Color.png" id="3_7gehf"]
[ext_resource type="ArrayMesh" uid="uid://cglg3dxbh8p8m" path="res://Models/3D - Vox Cleaner Edited (No Character)/Puzzle objects/Control Box/control_box_NG_C_62.obj" id="4_thm7s"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_88rlq"]
albedo_texture = ExtResource("1_d3s5t")
metallic = 0.5
roughness = 0.6
texture_filter = 0

[sub_resource type="Shader" id="Shader_umafu"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx, vertex_lighting;

uniform vec4 albedo_ceiling : source_color;
uniform sampler2D texture_albedo_ceiling : source_color, filter_nearest, repeat_enable;

uniform vec4 albedo_wall : source_color;
uniform sampler2D texture_albedo_wall : source_color, filter_nearest, repeat_enable;

uniform vec4 albedo_floor : source_color;
uniform sampler2D texture_albedo_floor : source_color, filter_nearest, repeat_enable;

uniform float ground_threshold : hint_range(0.0, 1.0, 0.01) = 0.8;
uniform float blend_smoothness : hint_range(0.0, 1.0, 0.01) = 0.1; // Controle de suavidade da transição

// Transparency slider
uniform float transparency : hint_range(0.0, 1.0, 0.01) = 0.5; // Transparency control (0 = opaque, 1 = fully transparent)

varying vec3 uv1_triplanar_pos;
varying vec2 uv1;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

varying vec3 vertex_normal;

uniform bool uv_global = true;

void vertex() {
    vertex_normal = NORMAL;
    ROUGHNESS = 0.0;

    vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

    TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
    TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
    TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
    TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

    BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
    BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
    BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
    BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

    uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
    if (uv_global) {
        uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset;
    } else {
        uv1_triplanar_pos = vec4(VERTEX, 1.0).xyz * uv1_scale + uv1_offset;
    }

    uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
    uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);

    uv1 = UV;
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
    vec4 samp = vec4(0.0);
    samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
    samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
    samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;

    return samp;
}

const vec4 ZERO = vec4(0.0, 0.0, 0.0, 0.0);

uniform bool use_uv_on_wall = false;
uniform bool use_uv_on_floor = false;
uniform bool use_uv_on_ceiling = false;

void fragment() {
    vec4 albedo_tex_floor = vec4(0.0);
    if (use_uv_on_floor) {
        albedo_tex_floor = texture(texture_albedo_floor, UV * uv1_scale.xy + uv1_offset.xy);
    } else {
        albedo_tex_floor = triplanar_texture(texture_albedo_floor, uv1_power_normal, uv1_triplanar_pos);
    }

    vec4 albedo_tex_wall = vec4(0.0);
    if (use_uv_on_wall) {
        albedo_tex_wall = texture(texture_albedo_wall, UV * uv1_scale.xy + uv1_offset.xy);
    } else {
        albedo_tex_wall = triplanar_texture(texture_albedo_wall, uv1_power_normal, uv1_triplanar_pos);
    }

    vec4 albedo_tex_ceiling = vec4(0.0);
    if (use_uv_on_ceiling) {
        albedo_tex_ceiling = texture(texture_albedo_ceiling, UV * uv1_scale.xy + uv1_offset.xy);
    } else {
        albedo_tex_ceiling = triplanar_texture(texture_albedo_ceiling, uv1_power_normal, uv1_triplanar_pos);
    }

    float blend_factor_floor = smoothstep(ground_threshold - blend_smoothness, ground_threshold + blend_smoothness, vertex_normal.y);
    float blend_factor_ceiling = smoothstep(ground_threshold - blend_smoothness, ground_threshold + blend_smoothness, -vertex_normal.y);

    vec4 albedo_tex = mix(mix(albedo_tex_wall, albedo_tex_floor, blend_factor_floor), albedo_tex_ceiling, blend_factor_ceiling);
    vec4 albedo_color = mix(mix(albedo_wall, albedo_floor, blend_factor_floor), albedo_ceiling, blend_factor_ceiling);

    // Apply transparency slider by adjusting alpha
    albedo_color.a *= transparency;

    ALBEDO = albedo_color.rgb * albedo_tex.rgb;
    ALPHA = albedo_color.a; // Set the final alpha value

    METALLIC = 0.0;
    SPECULAR = 0.0;
    ROUGHNESS = 0.0;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_thm7s"]
render_priority = 0
shader = SubResource("Shader_umafu")
shader_parameter/albedo_ceiling = Color(0.758192, 0.758192, 0.758191, 1)
shader_parameter/texture_albedo_ceiling = ExtResource("2_7gehf")
shader_parameter/albedo_wall = Color(0.737193, 0.737193, 0.737193, 1)
shader_parameter/texture_albedo_wall = ExtResource("2_7gehf")
shader_parameter/albedo_floor = Color(0.847474, 0.847474, 0.847474, 1)
shader_parameter/texture_albedo_floor = ExtResource("2_7gehf")
shader_parameter/ground_threshold = 0.8
shader_parameter/blend_smoothness = 0.1
shader_parameter/transparency = 0.13
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv_global = true
shader_parameter/use_uv_on_wall = false
shader_parameter/use_uv_on_floor = false
shader_parameter/use_uv_on_ceiling = false

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_dd84v"]
albedo_texture = ExtResource("3_7gehf")
texture_filter = 0

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_dd84v"]
data = PackedVector3Array(1.7, 0, -1.7, -1.7, 0, 1.7, 1.7, 0, 1.7, -1.7, 0, -1.7, -1.7, 0, 1.7, 1.7, 0, -1.7, -1.7, 0, -1.7, 1.7, 1.1, -1.7, -1.7, 1.1, -1.7, 1.7, 0, -1.7, 1.7, 1.1, -1.7, -1.7, 0, -1.7, -1.7, 1.1, 1.7, -1.7, 0, -1.7, -1.7, 1.1, -1.7, -1.7, 0, 1.7, -1.7, 0, -1.7, -1.7, 1.1, 1.7, 1.7, 1.1, 1.7, -1.7, 0, 1.7, -1.7, 1.1, 1.7, 1.7, 0, 1.7, -1.7, 0, 1.7, 1.7, 1.1, 1.7, 1.7, 1.1, -1.7, 1.7, 0, 1.7, 1.7, 1.1, 1.7, 1.7, 0, -1.7, 1.7, 0, 1.7, 1.7, 1.1, -1.7, -1.7, 1.1, -1.7, 1.7, 1.1, 1.7, -1.7, 1.1, 1.7, 1.7, 1.1, -1.7, 1.7, 1.1, 1.7, -1.7, 1.1, -1.7)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_oy7dd"]
data = PackedVector3Array(-1.1, 0.4, -0.1, 0.8, 0.3, -0.1, -1.1, 0.3, -0.1, 0.8, 0.4, -0.1, 0.8, 0.3, -0.1, -1.1, 0.4, -0.1, 1.7, 0.9, 1.7, 1.4, 0.9, -1.4, 1.7, 0.9, -1.7, -1.7, 0.9, -1.7, 1.7, 0.9, -1.7, 1.4, 0.9, -1.4, 1.4, 0.9, 1.4, 1.4, 0.9, -1.4, 1.7, 0.9, 1.7, 1.4, 0.9, -1.4, -1.4, 0.9, -1.4, -1.7, 0.9, -1.7, 1.7, 0.9, 1.7, -1.7, 0.9, 1.7, 1.4, 0.9, 1.4, -1.7, 0.9, 1.7, -1.7, 0.9, -1.7, -1.4, 0.9, -1.4, 1.4, 0.9, 1.4, -1.7, 0.9, 1.7, -1.4, 0.9, 1.4, -1.4, 0.9, 1.4, -1.7, 0.9, 1.7, -1.4, 0.9, -1.4, 0.8, 0.5, -0.7001, 0.7, 0.4, -0.7001, 0.8, 0.4, -0.7001, 0.7, 0.5, -0.7001, 0.7, 0.4, -0.7001, 0.8, 0.5, -0.7001, 0.4, 0.4, 1.2999, -1.1, 0.4, 1.2999, -1.3, 0.3, 1.2999, -1.3, 0.4, 1.2999, -1.3, 0.3, 1.2999, -1.1, 0.4, 1.2999, 0.8999, 0.3, 1.2999, 0.4, 0.4, 1.2999, -1.3, 0.3, 1.2999, 0.8999, 0.4, 1.2999, 0.4, 0.4, 1.2999, 0.8999, 0.3, 1.2999, 0.4, 0.5, 1.2999, -1.1, 0.4, 1.2999, 0.4, 0.4, 1.2999, -1.1, 0.5, 1.2999, -1.1, 0.4, 1.2999, 0.4, 0.5, 1.2999, 0.6, 0.3, -0.3, 0.7, 0.5, -0.3, 0.7, 0.3, -0.3, 0.6, 0.5, -0.3, 0.7, 0.5, -0.3, 0.6, 0.3, -0.3, 0.4, 0.5, 0.2999, 0.1, 0.3, 0.2999, 0.4, 0.3, 0.2999, 0.1, 0.5, 0.2999, 0.1, 0.3, 0.2999, 0.4, 0.5, 0.2999, -1.4, 0.3, -0.4, -1.1, 0.5, -0.4, -1.4, 0.5, -0.4, -1.1, 0.3, -0.4, -1.1, 0.5, -0.4, -1.4, 0.3, -0.4, 0.8999, 0.4, 0.2, 1, 0.4, -0.2, 1, 0.4, 0.2, 0.8999, 0.4, -0.2, 1, 0.4, -0.2, 0.8999, 0.4, 0.2, -1.3, 0.3, 1.2999, -1.3, 0.4, 0.1, -1.3, 0.3, 0.1, -1.3, 0.4, 1.2999, -1.3, 0.4, 0.1, -1.3, 0.3, 1.2999, 1.1, 0.3, -0.3, 1, 0.5, -0.3, 1.1, 0.5, -0.3, 1, 0.3, -0.3, 1, 0.5, -0.3, 1.1, 0.3, -0.3, 0.4, 0.4, 1.4, 0.8999, 0.4, 1.2999, 1, 0.4, 1.4, 0.4, 0.4, 1.2999, 0.8999, 0.4, 1.2999, 0.4, 0.4, 1.4, 0.8999, 0.4, 1.2, 1, 0.4, 1.4, 0.8999, 0.4, 1.2999, 1, 0.4, 1.2, 1, 0.4, 1.4, 0.8999, 0.4, 1.2, 0.7, 0.5, -0.5, 0.7, 0.6, -0.4, 0.7, 0.5, -0.4, 0.7, 0.6, -0.5, 0.7, 0.6, -0.4, 0.7, 0.5, -0.5, 1.1, 0.3, 0.2999, 1.1, 0.3, -0.3, 1.4, 0.3, 1.4, 1, 0.3, 0.2999, 1.1, 0.3, -0.3, 1.1, 0.3, 0.2999, 1, 0.3, -0.3, 1.1, 0.3, -0.3, 1, 0.3, 0.2999, 1.1, 0.3, 1.1, 1.1, 0.3, 0.2999, 1.4, 0.3, 1.4, 1, 0.3, 1.1, 1.1, 0.3, 1.1, 1.4, 0.3, 1.4, 1, 0.3, 1.4, 1, 0.3, 1.1, 1.4, 0.3, 1.4, 1.1, 0.3, -0.6, 1.4, 0.3, 1.4, 1.1, 0.3, -0.3, 1.1, 0.3, -1.1, 1.4, 0.3, 1.4, 1.1, 0.3, -0.6, 1.4, 0.3, -1.4, 1.4, 0.3, 1.4, 1.1, 0.3, -1.1, 1.1, 0.3, -1.4, 1.4, 0.3, -1.4, 1.1, 0.3, -1.1, 1, 0.3, -1.1, 1.1, 0.3, -1.1, 1.1, 0.3, -0.6, 1, 0.3, -0.6, 1, 0.3, -1.1, 1.1, 0.3, -0.6, 0.6, 0.3, 1.1, 0.6, 0.5, 0.8, 0.6, 0.5, 1.1, 0.6, 0.3, 0.8, 0.6, 0.5, 0.8, 0.6, 0.3, 1.1, 1.1, 0.5, -1.4, 0.6, 0.5, -1.4, 1.4, 0.9, -1.4, 1.4, 0.3, -1.4, 1.1, 0.5, -1.4, 1.4, 0.9, -1.4, 1.1, 0.3, -1.4, 1.1, 0.5, -1.4, 1.4, 0.3, -1.4, -1.4, 0.3, -1.4, 1.4, 0.9, -1.4, 0.6, 0.5, -1.4, -1.4, 0.9, -1.4, 1.4, 0.9, -1.4, -1.4, 0.3, -1.4, 0.6, 0.3, -1.4, -1.4, 0.3, -1.4, 0.6, 0.5, -1.4, 0.6, 0.3, 0.6, 0.6, 0.5, 0.2999, 0.6, 0.5, 0.6, 0.6, 0.3, 0.2999, 0.6, 0.5, 0.2999, 0.6, 0.3, 0.6, 1, 0.3, -1.1, 1.1, 0.5, -1.1, 1.1, 0.3, -1.1, 1, 0.5, -1.1, 1.1, 0.5, -1.1, 1, 0.3, -1.1, 0.7, 0.3, -1.1, 0.7, 0.4, -1, 0.7, 0.3, -0.6, 0.7, 0.5, -1, 0.7, 0.4, -1, 0.7, 0.3, -1.1, 0.7, 0.5, -1.1, 0.7, 0.5, -1, 0.7, 0.3, -1.1, 0.7, 0.4, -0.7001, 0.7, 0.3, -0.6, 0.7, 0.4, -1, 0.7, 0.5, -0.7001, 0.7, 0.3, -0.6, 0.7, 0.4, -0.7001, 0.7, 0.5, -0.6, 0.7, 0.3, -0.6, 0.7, 0.5, -0.7001, 0.4, 0.5, 1.4, 0.4, 0.4, 1.2999, 0.4, 0.4, 1.4, 0.4, 0.5, 1.2999, 0.4, 0.4, 1.2999, 0.4, 0.5, 1.4, -1.7, 0, 1.7, -1.7, 0.9, -1.7, -1.7, 0.9, 1.7, -1.7, 0, -1.7, -1.7, 0.9, -1.7, -1.7, 0, 1.7, 1, 0.3, -0.6, 1, 0.4, -0.7001, 1, 0.3, -1.1, 1, 0.5, -0.7001, 1, 0.4, -0.7001, 1, 0.3, -0.6, 1, 0.5, -0.6, 1, 0.5, -0.7001, 1, 0.3, -0.6, 1, 0.4, -1, 1, 0.3, -1.1, 1, 0.4, -0.7001, 1, 0.5, -1, 1, 0.3, -1.1, 1, 0.4, -1, 1, 0.5, -1.1, 1, 0.3, -1.1, 1, 0.5, -1, 0.8, 0.6, -0.4, 0.8, 0.5, -0.5, 0.8, 0.5, -0.4, 0.8, 0.6, -0.5, 0.8, 0.5, -0.5, 0.8, 0.6, -0.4, 0.8999, 0.4, -0.7001, 1, 0.4, -1, 1, 0.4, -0.7001, 0.8999, 0.4, -1, 1, 0.4, -1, 0.8999, 0.4, -0.7001, 0.1, 0.3, 0.8, 0.6, 0.5, 0.8, 0.6, 0.3, 0.8, 0.1, 0.5, 0.8, 0.6, 0.5, 0.8, 0.1, 0.3, 0.8, -1.1, 0.5, -0.4, -1.1, 0.4, -0.2, -1.1, 0.5, 0.1, -1.1, 0.3, -0.2, -1.1, 0.4, -0.2, -1.1, 0.5, -0.4, -1.1, 0.3, -0.4, -1.1, 0.3, -0.2, -1.1, 0.5, -0.4, -1.1, 0.4, -0.1, -1.1, 0.5, 0.1, -1.1, 0.4, -0.2, -1.1, 0.3, -0.1, -1.1, 0.5, 0.1, -1.1, 0.4, -0.1, -1.1, 0.3, 0.1, -1.1, 0.5, 0.1, -1.1, 0.3, -0.1, 0.8, 0.3, -1.1, 0.8999, 0.5, -1.1, 0.8999, 0.3, -1.1, 0.8, 0.5, -1.1, 0.8999, 0.5, -1.1, 0.8, 0.3, -1.1, 0.7, 0.4, -0.7001, 0.8, 0.4, -1, 0.8, 0.4, -0.7001, 0.7, 0.4, -1, 0.8, 0.4, -1, 0.7, 0.4, -0.7001, 0.7, 0.5, -0.6, 0.8, 0.5, -0.6, 0.7, 0.5, -0.5, 0.7, 0.5, -0.7001, 0.8, 0.5, -0.6, 0.7, 0.5, -0.6, 0.8, 0.5, -0.7001, 0.8, 0.5, -0.6, 0.7, 0.5, -0.7001, 0.8999, 0.5, -0.6, 0.7, 0.5, -0.5, 0.8, 0.5, -0.6, 0.8, 0.5, -0.5, 0.7, 0.5, -0.5, 0.8999, 0.5, -0.6, 0.6, 0.5, -0.3, 0.7, 0.5, -0.6, 0.7, 0.5, -0.5, 0.6, 0.5, -0.6, 0.7, 0.5, -0.6, 0.6, 0.5, -0.3, 0.7, 0.5, -0.4, 0.6, 0.5, -0.3, 0.7, 0.5, -0.5, 0.7, 0.5, -0.4, 0.8, 0.5, -0.4, 0.6, 0.5, -0.3, 0.8, 0.5, -0.4, 0.8, 0.5, -0.5, 0.8999, 0.5, -0.6, 0.6, 0.5, -0.3, 0.8, 0.5, -0.4, 0.7, 0.5, -0.3, 0.8999, 0.5, -0.7001, 1, 0.5, -0.7001, 0.8999, 0.5, -0.6, 0.8999, 0.5, -0.6, 1, 0.5, -0.7001, 0.8, 0.5, -0.4, 1, 0.5, -0.7001, 1, 0.5, -0.6, 0.8, 0.5, -0.4, 0.7, 0.5, -0.2, 0.7, 0.5, -0.3, 0.8, 0.5, -0.2, 0.8, 0.5, -0.2, 0.7, 0.5, -0.3, 0.8, 0.5, -0.3, 0.7, 0.5, -0.3, 0.8, 0.5, -0.4, 0.8, 0.5, -0.3, 0.8, 0.5, -0.3, 0.8, 0.5, -0.4, 0.8999, 0.5, -0.3, 1, 0.5, -0.6, 1.1, 0.5, -0.3, 0.8, 0.5, -0.4, 1.1, 0.5, -0.6, 1.1, 0.5, -0.3, 1, 0.5, -0.6, 1, 0.5, -0.3, 0.8, 0.5, -0.4, 1.1, 0.5, -0.3, 0.8999, 0.5, -0.3, 0.8, 0.5, -0.4, 1, 0.5, -0.3, 1, 0.5, -0.2, 0.8999, 0.5, -0.3, 1, 0.5, -0.3, 0.8999, 0.5, -0.2, 0.8999, 0.5, -0.3, 1, 0.5, -0.2, 0.7, 0.5, -0.2, 0.8, 0.4, -0.2, 0.7, 0.4, -0.2, 0.8, 0.5, -0.2, 0.8, 0.4, -0.2, 0.7, 0.5, -0.2, 0.7, 0.6, -0.5, 0.8, 0.6, -0.4, 0.7, 0.6, -0.4, 0.8, 0.6, -0.5, 0.8, 0.6, -0.4, 0.7, 0.6, -0.5, 1, 0.5, -0.7001, 0.8999, 0.4, -0.7001, 1, 0.4, -0.7001, 0.8999, 0.5, -0.7001, 0.8999, 0.4, -0.7001, 1, 0.5, -0.7001, 0.7, 0.3, -0.6, 0.6, 0.5, -0.6, 0.6, 0.3, -0.6, 0.7, 0.5, -0.6, 0.6, 0.5, -0.6, 0.7, 0.3, -0.6, 0.8999, 0.5, -0.2, 1, 0.4, -0.2, 0.8999, 0.4, -0.2, 1, 0.5, -0.2, 1, 0.4, -0.2, 0.8999, 0.5, -0.2, 0.7, 0.6, -0.4, 0.8, 0.5, -0.4, 0.7, 0.5, -0.4, 0.8, 0.6, -0.4, 0.8, 0.5, -0.4, 0.7, 0.6, -0.4, 0.6, 0.5, -1.1, 1.1, 0.5, -1.4, 0.7, 0.5, -1.1, 0.6, 0.5, -1.4, 1.1, 0.5, -1.4, 0.6, 0.5, -1.1, 0.8, 0.5, -1.1, 0.7, 0.5, -1.1, 1.1, 0.5, -1.4, 0.7, 0.5, -1, 0.7, 0.5, -1.1, 0.8, 0.5, -1.1, 0.8, 0.5, -1, 0.7, 0.5, -1, 0.8, 0.5, -1.1, 0.8999, 0.5, -1.1, 0.8, 0.5, -1.1, 1.1, 0.5, -1.4, 1, 0.5, -1.1, 0.8999, 0.5, -1.1, 1.1, 0.5, -1.4, 1.1, 0.5, -1.1, 1, 0.5, -1.1, 1.1, 0.5, -1.4, 1, 0.5, -1, 0.8999, 0.5, -1.1, 1, 0.5, -1.1, 0.8999, 0.5, -1, 0.8999, 0.5, -1.1, 1, 0.5, -1, -1.4, 0.4, 0.1, -1.3, 0.4, 1.2999, -1.4, 0.4, 1.4, -1.3, 0.4, 0.1, -1.3, 0.4, 1.2999, -1.4, 0.4, 0.1, -1.1, 0.4, 1.2999, -1.4, 0.4, 1.4, -1.3, 0.4, 1.2999, -1.1, 0.4, 1.4, -1.4, 0.4, 1.4, -1.1, 0.4, 1.2999, 0.6, 0.3, -0.3, 0.6, 0.5, -0.6, 0.6, 0.5, -0.3, 0.6, 0.3, -0.6, 0.6, 0.5, -0.6, 0.6, 0.3, -0.3, 1.1, 0.3, 1.1, 1.1, 0.5, 0.2999, 1.1, 0.3, 0.2999, 1.1, 0.5, 1.1, 1.1, 0.5, 0.2999, 1.1, 0.3, 1.1, 1.7, 0, -1.7, -1.7, 0, 1.7, 1.7, 0, 1.7, -1.7, 0, -1.7, -1.7, 0, 1.7, 1.7, 0, -1.7, 0.1, 0.3, 0.2999, 0.1, 0.5, 0.5, 0.1, 0.5, 0.6, 0.1, 0.5, 0.2999, 0.1, 0.5, 0.5, 0.1, 0.3, 0.2999, 0.1, 0.6, 0.6, 0.1, 0.5, 0.6, 0.1, 0.5, 0.5, 0.1, 0.6, 0.5, 0.1, 0.6, 0.6, 0.1, 0.5, 0.5, 0.1, 0.5, 0.8, 0.1, 0.3, 0.2999, 0.1, 0.5, 0.6, 0.1, 0.3, 0.8, 0.1, 0.3, 0.2999, 0.1, 0.5, 0.8, 0.8999, 0.5, -1, 1, 0.4, -1, 0.8999, 0.4, -1, 1, 0.5, -1, 1, 0.4, -1, 0.8999, 0.5, -1, 0.6, 0.3, -1.4, 0.6, 0.5, -1.1, 0.6, 0.3, -1.1, 0.6, 0.5, -1.4, 0.6, 0.5, -1.1, 0.6, 0.3, -1.4, 1.7, 0.9, 1.7, -1.7, 0, 1.7, -1.7, 0.9, 1.7, 1.7, 0, 1.7, -1.7, 0, 1.7, 1.7, 0.9, 1.7, -1.4, 0.5, -0.4, -1.1, 0.5, 0.1, -1.4, 0.5, 0.1, -1.1, 0.5, -0.4, -1.1, 0.5, 0.1, -1.4, 0.5, -0.4, 0.8999, 0.5, 1.2, 1, 0.4, 1.2, 0.8999, 0.4, 1.2, 1, 0.5, 1.2, 1, 0.4, 1.2, 0.8999, 0.5, 1.2, 0.7, 0.5, -1, 0.8, 0.4, -1, 0.7, 0.4, -1, 0.8, 0.5, -1, 0.8, 0.4, -1, 0.7, 0.5, -1, 1, 0.3, -0.3, 1, 0.3, 0.2999, 1, 0.4, 0.2, 1, 0.5, 0.2, 1, 0.4, 0.2, 1, 0.3, 0.2999, 1, 0.5, 0.2999, 1, 0.5, 0.2, 1, 0.3, 0.2999, 1, 0.4, -0.2, 1, 0.3, -0.3, 1, 0.4, 0.2, 1, 0.5, -0.2, 1, 0.3, -0.3, 1, 0.4, -0.2, 1, 0.5, -0.3, 1, 0.3, -0.3, 1, 0.5, -0.2, 1, 0.5, 0.2, 0.8999, 0.4, 0.2, 1, 0.4, 0.2, 0.8999, 0.5, 0.2, 0.8999, 0.4, 0.2, 1, 0.5, 0.2, 0.8, 0.6, -0.5, 0.7, 0.5, -0.5, 0.8, 0.5, -0.5, 0.7, 0.6, -0.5, 0.7, 0.5, -0.5, 0.8, 0.6, -0.5, 0.2, 0.6, 0.6, 0.2, 0.5, 0.5, 0.2, 0.5, 0.6, 0.2, 0.6, 0.5, 0.2, 0.5, 0.5, 0.2, 0.6, 0.6, 0.8, 0.3, -0.6, 0.8999, 0.3, -1.1, 0.8999, 0.3, -0.6, 0.8, 0.3, -1.1, 0.8999, 0.3, -1.1, 0.8, 0.3, -0.6, 0.1, 0.5, 0.2999, 0.4, 0.5, 0.6, 0.2, 0.5, 0.5, 0.1, 0.5, 0.5, 0.1, 0.5, 0.2999, 0.2, 0.5, 0.5, 0.4, 0.5, 0.2999, 0.4, 0.5, 0.6, 0.1, 0.5, 0.2999, 0.6, 0.5, 0.8, 0.2, 0.5, 0.5, 0.4, 0.5, 0.6, 0.2, 0.5, 0.6, 0.2, 0.5, 0.5, 0.6, 0.5, 0.8, 0.1, 0.5, 0.6, 0.2, 0.5, 0.6, 0.6, 0.5, 0.8, 0.1, 0.5, 0.8, 0.1, 0.5, 0.6, 0.6, 0.5, 0.8, 1, 0.5, 1.1, 0.6, 0.5, 0.8, 0.4, 0.5, 0.6, 0.6, 0.5, 0.6, 1, 0.5, 1.1, 0.4, 0.5, 0.6, 0.6, 0.5, 1.1, 0.6, 0.5, 0.8, 0.8999, 0.5, 1.1, 0.8999, 0.5, 1.1, 0.6, 0.5, 0.8, 1, 0.5, 1.1, 0.8999, 0.5, 1.2, 0.8999, 0.5, 1.1, 1, 0.5, 1.1, 1, 0.5, 1.2, 0.8999, 0.5, 1.2, 1, 0.5, 1.1, 1, 0.5, 0.2999, 1, 0.5, 1.1, 0.6, 0.5, 0.6, 1.1, 0.5, 1.1, 1, 0.5, 1.1, 1, 0.5, 0.2999, 1.1, 0.5, 0.2999, 1.1, 0.5, 1.1, 1, 0.5, 0.2999, 0.8999, 0.5, 0.2999, 1, 0.5, 0.2999, 0.6, 0.5, 0.6, 0.6, 0.5, 0.2999, 0.8999, 0.5, 0.2999, 0.6, 0.5, 0.6, 0.8999, 0.5, 0.2, 1, 0.5, 0.2999, 0.8999, 0.5, 0.2999, 1, 0.5, 0.2, 1, 0.5, 0.2999, 0.8999, 0.5, 0.2, 1.1, 0.3, -0.6, 1, 0.5, -0.6, 1, 0.3, -0.6, 1.1, 0.5, -0.6, 1, 0.5, -0.6, 1.1, 0.3, -0.6, 0.8, 0.3, -1.1, 0.8, 0.3, -0.6, 0.8, 0.4, -0.7001, 0.8, 0.5, -0.7001, 0.8, 0.4, -0.7001, 0.8, 0.3, -0.6, 0.8, 0.5, -0.6, 0.8, 0.5, -0.7001, 0.8, 0.3, -0.6, 0.8, 0.4, -1, 0.8, 0.3, -1.1, 0.8, 0.4, -0.7001, 0.8, 0.5, -1, 0.8, 0.3, -1.1, 0.8, 0.4, -1, 0.8, 0.5, -1.1, 0.8, 0.3, -1.1, 0.8, 0.5, -1, 1.7, 0.9, -1.7, -1.7, 0, -1.7, 1.7, 0, -1.7, -1.7, 0.9, -1.7, -1.7, 0, -1.7, 1.7, 0.9, -1.7, 0.1, 0.6, 0.5, 0.2, 0.6, 0.6, 0.1, 0.6, 0.6, 0.2, 0.6, 0.5, 0.2, 0.6, 0.6, 0.1, 0.6, 0.5, 0.8, 0.3, -0.6, 0.8999, 0.5, -0.6, 0.8, 0.5, -0.6, 0.8999, 0.3, -0.6, 0.8999, 0.5, -0.6, 0.8, 0.3, -0.6, 0.8999, 0.3, -0.3, 0.8999, 0.4, -0.2, 0.8999, 0.3, 0.2999, 0.8999, 0.5, -0.2, 0.8999, 0.4, -0.2, 0.8999, 0.3, -0.3, 0.8999, 0.5, -0.3, 0.8999, 0.5, -0.2, 0.8999, 0.3, -0.3, 0.8999, 0.4, 0.2, 0.8999, 0.3, 0.2999, 0.8999, 0.4, -0.2, 0.8999, 0.5, 0.2, 0.8999, 0.3, 0.2999, 0.8999, 0.4, 0.2, 0.8999, 0.5, 0.2999, 0.8999, 0.3, 0.2999, 0.8999, 0.5, 0.2, -1.1, 0.4, 1.2999, -1.1, 0.5, 1.4, -1.1, 0.4, 1.4, -1.1, 0.5, 1.2999, -1.1, 0.5, 1.4, -1.1, 0.4, 1.2999, 0.6, 0.3, -1.1, 0.7, 0.5, -1.1, 0.7, 0.3, -1.1, 0.6, 0.5, -1.1, 0.7, 0.5, -1.1, 0.6, 0.3, -1.1, 0.7, 0.4, -0.2, 0.7, 0.3, -0.2, 0.7, 0.5, -0.3, 0.7, 0.3, -0.3, 0.7, 0.5, -0.3, 0.7, 0.3, -0.2, 0.7, 0.5, -0.2, 0.7, 0.4, -0.2, 0.7, 0.5, -0.3, 0.7, 0.4, -0.2, 0.8, 0.4, -0.2, -1.1, 0.4, -0.1, 0.8, 0.4, -0.1, -1.1, 0.4, -0.1, 0.8, 0.4, -0.2, -1.1, 0.4, -0.2, 0.7, 0.4, -0.2, -1.1, 0.4, -0.1, 0.6, 0.3, 0.2999, 0.8999, 0.5, 0.2999, 0.6, 0.5, 0.2999, 0.8999, 0.3, 0.2999, 0.8999, 0.5, 0.2999, 0.6, 0.3, 0.2999, 0.8, 0.3, -0.1, 0.8, 0.4, -0.2, 0.8, 0.3, -0.3, 0.8, 0.4, -0.1, 0.8, 0.4, -0.2, 0.8, 0.3, -0.1, 0.8, 0.5, -0.2, 0.8, 0.3, -0.3, 0.8, 0.4, -0.2, 0.8, 0.5, -0.3, 0.8, 0.3, -0.3, 0.8, 0.5, -0.2, 0.1, 0.6, 0.6, 0.2, 0.5, 0.6, 0.1, 0.5, 0.6, 0.2, 0.6, 0.6, 0.2, 0.5, 0.6, 0.1, 0.6, 0.6, -1.1, 0.5, 1.4, 0.4, 0.5, 1.2999, 0.4, 0.5, 1.4, -1.1, 0.5, 1.2999, 0.4, 0.5, 1.2999, -1.1, 0.5, 1.4, 0.8999, 0.4, 1.2, 0.8999, 0.3, 1.1, 0.8999, 0.5, 1.1, 0.8999, 0.5, 1.2, 0.8999, 0.4, 1.2, 0.8999, 0.5, 1.1, 0.8999, 0.4, 1.2999, 0.8999, 0.3, 1.1, 0.8999, 0.4, 1.2, 0.8999, 0.3, 1.2999, 0.8999, 0.3, 1.1, 0.8999, 0.4, 1.2999, -1.4, 0.3, -1.4, 0.6, 0.3, -1.1, -1.1, 0.3, -0.4, 0.6, 0.3, -1.4, 0.6, 0.3, -1.1, -1.4, 0.3, -1.4, -1.4, 0.3, -0.4, -1.4, 0.3, -1.4, -1.1, 0.3, -0.4, 0.6, 0.3, -0.6, -1.1, 0.3, -0.4, 0.6, 0.3, -1.1, 0.7, 0.3, -1.1, 0.6, 0.3, -0.6, 0.6, 0.3, -1.1, 0.7, 0.3, -0.6, 0.6, 0.3, -0.6, 0.7, 0.3, -1.1, 0.6, 0.3, -0.3, -1.1, 0.3, -0.4, 0.6, 0.3, -0.6, 0.7, 0.3, -0.2, -1.1, 0.3, -0.4, 0.6, 0.3, -0.3, -1.1, 0.3, -0.2, -1.1, 0.3, -0.4, 0.7, 0.3, -0.2, 0.7, 0.3, -0.3, 0.7, 0.3, -0.2, 0.6, 0.3, -0.3, 0.8, 0.3, -0.3, 0.8999, 0.5, -0.3, 0.8999, 0.3, -0.3, 0.8, 0.5, -0.3, 0.8999, 0.5, -0.3, 0.8, 0.3, -0.3, 1.4, 0.3, 1.4, 1.4, 0.9, -1.4, 1.4, 0.9, 1.4, 1.4, 0.3, -1.4, 1.4, 0.9, -1.4, 1.4, 0.3, 1.4, 0.4, 0.3, 0.6, 0.4, 0.5, 0.2999, 0.4, 0.3, 0.2999, 0.4, 0.5, 0.6, 0.4, 0.5, 0.2999, 0.4, 0.3, 0.6, 0.6, 0.5, 0.6, 0.4, 0.3, 0.6, 0.6, 0.3, 0.6, 0.4, 0.5, 0.6, 0.4, 0.3, 0.6, 0.6, 0.5, 0.6, 0.8999, 0.3, 1.2999, -1.1, 0.3, 0.1, 0.1, 0.3, 0.8, 0.6, 0.3, 1.1, 0.8999, 0.3, 1.2999, 0.1, 0.3, 0.8, 0.8999, 0.3, 1.1, 0.8999, 0.3, 1.2999, 0.6, 0.3, 1.1, 0.6, 0.3, 0.8, 0.6, 0.3, 1.1, 0.1, 0.3, 0.8, -1.3, 0.3, 1.2999, -1.1, 0.3, 0.1, 0.8999, 0.3, 1.2999, -1.3, 0.3, 0.1, -1.1, 0.3, 0.1, -1.3, 0.3, 1.2999, 0.1, 0.3, 0.2999, 0.1, 0.3, 0.8, -1.1, 0.3, 0.1, 0.4, 0.3, 0.2999, 0.1, 0.3, 0.2999, -1.1, 0.3, 0.1, 0.6, 0.3, 0.2999, 0.4, 0.3, 0.2999, -1.1, 0.3, 0.1, 0.4, 0.3, 0.6, 0.4, 0.3, 0.2999, 0.6, 0.3, 0.2999, 0.6, 0.3, 0.6, 0.4, 0.3, 0.6, 0.6, 0.3, 0.2999, 0.8, 0.3, -0.1, 0.6, 0.3, 0.2999, -1.1, 0.3, 0.1, -1.1, 0.3, -0.1, 0.8, 0.3, -0.1, -1.1, 0.3, 0.1, 0.8999, 0.3, 0.2999, 0.6, 0.3, 0.2999, 0.8, 0.3, -0.1, 0.8, 0.3, -0.3, 0.8999, 0.3, 0.2999, 0.8, 0.3, -0.1, 0.8999, 0.3, -0.3, 0.8999, 0.3, 0.2999, 0.8, 0.3, -0.3, 1.1, 0.5, -1.4, 1.1, 0.3, -1.1, 1.1, 0.5, -1.1, 1.1, 0.3, -1.4, 1.1, 0.3, -1.1, 1.1, 0.5, -1.4, 1, 0.5, 1.1, 1.1, 0.3, 1.1, 1, 0.3, 1.1, 1.1, 0.5, 1.1, 1.1, 0.3, 1.1, 1, 0.5, 1.1, 0.8999, 0.3, -0.6, 0.8999, 0.3, -1.1, 0.8999, 0.4, -1, 0.8999, 0.5, -1, 0.8999, 0.4, -1, 0.8999, 0.3, -1.1, 0.8999, 0.5, -1.1, 0.8999, 0.5, -1, 0.8999, 0.3, -1.1, 0.8999, 0.4, -0.7001, 0.8999, 0.3, -0.6, 0.8999, 0.4, -1, 0.8999, 0.5, -0.7001, 0.8999, 0.3, -0.6, 0.8999, 0.4, -0.7001, 0.8999, 0.5, -0.6, 0.8999, 0.3, -0.6, 0.8999, 0.5, -0.7001, 0.2, 0.6, 0.5, 0.1, 0.5, 0.5, 0.2, 0.5, 0.5, 0.1, 0.6, 0.5, 0.1, 0.5, 0.5, 0.2, 0.6, 0.5, 1.7, 0.9, 1.7, 1.7, 0, -1.7, 1.7, 0, 1.7, 1.7, 0.9, -1.7, 1.7, 0, -1.7, 1.7, 0.9, 1.7, -1.4, 0.3, -1.4, -1.4, 0.5, -0.4, -1.4, 0.9, 1.4, -1.4, 0.3, -0.4, -1.4, 0.5, -0.4, -1.4, 0.3, -1.4, -1.4, 0.9, -1.4, -1.4, 0.3, -1.4, -1.4, 0.9, 1.4, -1.4, 0.5, 0.1, -1.4, 0.9, 1.4, -1.4, 0.5, -0.4, -1.4, 0.4, 0.1, -1.4, 0.9, 1.4, -1.4, 0.5, 0.1, -1.4, 0.4, 1.4, -1.4, 0.9, 1.4, -1.4, 0.4, 0.1, 0.6, 0.3, 1.1, 0.8999, 0.5, 1.1, 0.8999, 0.3, 1.1, 0.6, 0.5, 1.1, 0.8999, 0.5, 1.1, 0.6, 0.3, 1.1, 1.1, 0.5, 0.2999, 1, 0.3, 0.2999, 1.1, 0.3, 0.2999, 1, 0.5, 0.2999, 1, 0.3, 0.2999, 1.1, 0.5, 0.2999, 1, 0.4, 1.4, -1.4, 0.9, 1.4, 0.4, 0.5, 1.4, 0.4, 0.4, 1.4, 1, 0.4, 1.4, 0.4, 0.5, 1.4, -1.1, 0.5, 1.4, 0.4, 0.5, 1.4, -1.4, 0.9, 1.4, -1.1, 0.4, 1.4, -1.1, 0.5, 1.4, -1.4, 0.9, 1.4, -1.4, 0.4, 1.4, -1.1, 0.4, 1.4, -1.4, 0.9, 1.4, 1.4, 0.9, 1.4, -1.4, 0.9, 1.4, 1, 0.4, 1.4, 1, 0.3, 1.4, 1.4, 0.9, 1.4, 1, 0.4, 1.4, 1.4, 0.3, 1.4, 1.4, 0.9, 1.4, 1, 0.3, 1.4, 1.1, 0.5, -0.6, 1.1, 0.3, -0.3, 1.1, 0.5, -0.3, 1.1, 0.3, -0.6, 1.1, 0.3, -0.3, 1.1, 0.5, -0.6, 1, 0.3, 1.4, 1, 0.4, 1.2, 1, 0.3, 1.1, 1, 0.4, 1.4, 1, 0.4, 1.2, 1, 0.3, 1.4, 1, 0.5, 1.2, 1, 0.3, 1.1, 1, 0.4, 1.2, 1, 0.5, 1.1, 1, 0.3, 1.1, 1, 0.5, 1.2, 0.7, 0.3, -0.2, -1.1, 0.4, -0.2, -1.1, 0.3, -0.2, 0.7, 0.4, -0.2, -1.1, 0.4, -0.2, 0.7, 0.3, -0.2, -1.4, 0.4, 0.1, -1.1, 0.5, 0.1, -1.3, 0.4, 0.1, -1.4, 0.5, 0.1, -1.1, 0.5, 0.1, -1.4, 0.4, 0.1, -1.3, 0.3, 0.1, -1.3, 0.4, 0.1, -1.1, 0.5, 0.1, -1.1, 0.3, 0.1, -1.3, 0.3, 0.1, -1.1, 0.5, 0.1)

[node name="ControlBox - Interectable" type="MeshInstance3D"]
transform = Transform3D(-1, -8.74228e-08, 3.82137e-15, 0, -4.37114e-08, -1, 8.74228e-08, -1, 4.37114e-08, 0, 0, 0)
material_override = SubResource("StandardMaterial3D_88rlq")
material_overlay = SubResource("ShaderMaterial_thm7s")
mesh = ExtResource("2_7xdwb")
skeleton = NodePath("../..")

[node name="Lid" type="MeshInstance3D" parent="."]
transform = Transform3D(0.9, 0, 0, 0, 0.0999864, -0.0148432, 0, 0.00164924, 0.899878, 0.0130043, 0.899448, 0.00146008)
material_override = SubResource("StandardMaterial3D_dd84v")
material_overlay = SubResource("ShaderMaterial_thm7s")
mesh = ExtResource("4_thm7s")
skeleton = NodePath("../../..")

[node name="StaticBody3D" type="StaticBody3D" parent="Lid"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Lid/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_dd84v")

[node name="StaticBody3D" type="StaticBody3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_oy7dd")
